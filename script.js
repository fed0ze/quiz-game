
// =======================
// –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
const levels = [
  // –õ–µ–≥–∫–∏–π
  [
    {
      question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ?",
      answers: ["–ù–∞–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤", "–§—É–Ω–∫—Ü–∏—è", "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ê–ª–≥–æ—Ä–∏—Ç–º"],
      correct: 0,
      explanation: "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."
    },
    {
      question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞—Ñ?",
      answers: ["–ù–∞–±–æ—Ä –≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä", "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª", "–§—É–Ω–∫—Ü–∏—è", "–ê–ª–≥–æ—Ä–∏—Ç–º"],
      correct: 0,
      explanation: "–ì—Ä–∞—Ñ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä –º–µ–∂–¥—É –Ω–∏–º–∏."
    }
  ],
  // –°—Ä–µ–¥–Ω–∏–π
  [
    {
      question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –±–∏–µ–∫—Ü–∏—è?",
      answers: ["–í–∑–∞–∏–º–Ω–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "–§—É–Ω–∫—Ü–∏—è", "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ", "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
      correct: 0,
      explanation: "–ë–∏–µ–∫—Ü–∏—è ‚Äî —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤."
    },
    {
      question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞?",
      answers: ["–†–∞–∑–¥–µ–ª –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∏–∑—É—á–∞—é—â–∏–π –º–µ—Ç–æ–¥—ã –ø–æ–¥—Å—á—ë—Ç–∞", "–§—É–Ω–∫—Ü–∏—è", "–ê–ª–≥–æ—Ä–∏—Ç–º", "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ"],
      correct: 0,
      explanation: "–ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–¥—Å—á–µ—Ç–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω–µ—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä."
    }
  ],
  // –°–ª–æ–∂–Ω—ã–π
  [
    {
      question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –±—É–ª–µ–≤–∞ –∞–ª–≥–µ–±—Ä–∞?",
      answers: ["–ê–ª–≥–µ–±—Ä–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", "–ù–∞–±–æ—Ä —á–∏—Å–µ–ª", "–§—É–Ω–∫—Ü–∏—è", "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
      correct: 0,
      explanation: "–ë—É–ª–µ–≤–∞ –∞–ª–≥–µ–±—Ä–∞ –∏–∑—É—á–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."
    },
    {
      question: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–æ—Ä–∏—è –≥—Ä–∞—Ñ–æ–≤?",
      answers: ["–ò–∑—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–æ–≤ –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤", "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π", "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª", "–ê–ª–≥–æ—Ä–∏—Ç–º—ã"],
      correct: 0,
      explanation: "–¢–µ–æ—Ä–∏—è –≥—Ä–∞—Ñ–æ–≤ ‚Äî —Ä–∞–∑–¥–µ–ª –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∏–∑—É—á–∞—é—â–∏–π –≥—Ä–∞—Ñ—ã."
    }
  ]
];

// ============== –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const questionEl = document.getElementById("question");
const answersEl = document.getElementById("answers");
const resultEl = document.getElementById("result");
const nextBtn = document.getElementById("next-btn");
const livesEl = document.getElementById("lives");
const progressEl = document.getElementById("progress");
const progressText = document.getElementById("progress-text");
const timeEl = document.getElementById("time");
const levelSelect = document.getElementById("level-select");

const soundCorrect = document.getElementById("sound-correct");
const soundWrong = document.getElementById("sound-wrong");
const soundTimeout = document.getElementById("sound-timeout");

// ============== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let level = 0;
let questionIndex = 0;
let score = 0;
let lives = 3;
let timer = null;
let timeLeft = 20;
let gameOver = false;
let questionsOrder = []; // –î–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏

// ============== –§—É–Ω–∫—Ü–∏–∏

function shuffleArray(arr) {
  for (let i = arr.length -1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i+1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

function updateLives() {
  livesEl.textContent = "‚ù§Ô∏è".repeat(lives);
}

function updateProgress() {
  progressEl.max = questionsOrder.length;
  progressEl.value = questionIndex;
  progressText.textContent = `${questionIndex} / ${questionsOrder.length}`;
}

function showResult(text) {
  resultEl.textContent = text;
}

function disableAnswers() {
  const buttons = answersEl.querySelectorAll("button");
  const correct = levels[level][questionsOrder[questionIndex]].correct;
  buttons.forEach((btn, i) => {
    btn.disabled = true;
    if (i === correct) {
      btn.style.backgroundColor = "#c8e6c9"; // –∑–µ–ª—ë–Ω—ã–π
    }
  });
}

function resetAnswers() {
  const buttons = answersEl.querySelectorAll("button");
  buttons.forEach(btn => {
    btn.style.backgroundColor = "";
    btn.disabled = false;
  });
}

function startTimer() {
  timeLeft = 20;
  timeEl.textContent = timeLeft;
  timer = setInterval(() => {
    timeLeft--;
    timeEl.textContent = timeLeft;
    if (timeLeft <= 0) {
      clearInterval(timer);
      soundTimeout.play();
      showResult("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!");
      disableAnswers();
      nextBtn.style.display = "block";
    }
  }, 1000);
}

let currentAnswerMap = []; // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏

function loadQuestion() {
  gameOver = false;
  resetAnswers();
  updateLives();
  updateProgress();
  showResult("");

  if (questionIndex >= questionsOrder.length) {
    endGame();
    return;
  }

  const q = levels[level][questionsOrder[questionIndex]];

  questionEl.textContent = q.question;

  // –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
  answersEl.innerHTML = "";

  // –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
  let answersArr = q.answers.map((ans, idx) => ({text: ans, index: idx}));
  shuffleArray(answersArr);

  currentAnswerMap = []; // –æ—á–∏—â–∞–µ–º –º–∞–ø—É

  answersArr.forEach((ansObj, btnIdx) => {
    const btn = document.createElement("button");
    btn.textContent = ansObj.text;
    btn.onclick = () => checkAnswer(btnIdx);
    answersEl.appendChild(btn);

    currentAnswerMap.push(ansObj.index); // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
  });

  nextBtn.style.display = "none";

  startTimer();
}

function checkAnswer(btnIdx) {
  if (gameOver) return;

  clearInterval(timer);

  const q = levels[level][questionsOrder[questionIndex]];
  const buttons = answersEl.querySelectorAll("button");

  buttons.forEach((btn, i) => {
    btn.disabled = true;

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–∫–Ω–æ–ø–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–π real –∏–Ω–¥–µ–∫—Å === q.correct)
    if (currentAnswerMap[i] === q.correct) btn.style.backgroundColor = "#c8e6c9";

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if (i === btnIdx && currentAnswerMap[i] !== q.correct) btn.style.backgroundColor = "#ffcdd2";
  });

  if (currentAnswerMap[btnIdx] === q.correct) {
    soundCorrect.play();
    score += 10 + timeLeft;
    showResult("‚úÖ –í–µ—Ä–Ω–æ! " + q.explanation);
  } else {
    soundWrong.play();
    lives--;
    updateLives();
    showResult("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! " + q.explanation);
    if (lives <= 0) {
      gameOver = true;
      showResult("üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ñ–∏–∑–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.");
      nextBtn.style.display = "none";
      return;
    }
  }

  localStorage.setItem('quizScore', score);
  nextBtn.style.display = "block";
}

function nextQuestion() {
  questionIndex++;
  loadQuestion();
}

function endGame() {
  gameOver = true;
  questionEl.textContent = "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!";
  answersEl.innerHTML = "";
  showResult(`–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: ${score} –æ—á–∫–æ–≤ –∏–∑ ${questionsOrder.length} –≤–æ–ø—Ä–æ—Å–æ–≤.`);
  nextBtn.style.display = "none";
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function startGame() {
  score = 0;
  lives = 3;
  questionIndex = 0;
  updateLives();

  // –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
  questionsOrder = Array.from(Array(levels[level].length).keys());
  shuffleArray(questionsOrder);

  loadQuestion();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
levelSelect.onchange = () => {
  level = +levelSelect.value;
  startGame();
};

nextBtn.onclick = () => {
  nextQuestion();
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å—Ä–∞–∑—É
startGame();

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (1-4 –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤)
document.addEventListener('keydown', e => {
  if (gameOver) return;

  if (e.key >= '1' && e.key <= '4') {
    const btns = answersEl.querySelectorAll('button');
    const idx = +e.key - 1;
    if (btns[idx] && !btns[idx].disabled) {
      btns[idx].click();
    }
  }
});
